{"version":3,"sources":["movies.js","moviesList.js","movieDetail.js","movieSearch.js","App.js","serviceWorker.js","index.js"],"names":["Movie","movie","to","id","Poster","src","poster_path","alt","title","styled","img","moviesList","state","movies","API_URL","fetch","res","json","this","setState","results","console","log","MovieGrid","map","key","overview","PureComponent","div","movieDetail","props","match","params","MovieWrapper","backdrop","backdrop_path","MovieInfo","release_date","Component","movieSearch","type","value","searchString","ref","onChange","handleChange","App","basename","className","component","exact","path","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qeAOA,IAWeA,EATD,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACZ,kBAAC,IAAD,CAAMC,GAAE,WAAMD,EAAME,KAClB,kBAAC,IAAD,CAAWA,GAAIF,EAAME,IACnB,kBAACC,EAAD,CAAQC,IAAG,UALG,kCAKH,OAAmBJ,EAAMK,aAAeC,IAAKN,EAAMO,WAiBvDJ,EAASK,IAAOC,IAAV,K,gbCIJC,E,4MA5BXC,MAAQ,CACJC,OAAQ,I,sMAKS,iBACL,mCACVC,E,4DADU,mC,iCADK,iB,wCAGHC,MAAM,GAAD,OAAID,I,cAArBE,E,gBACeA,EAAIC,O,OAAnBJ,E,OACNK,KAAKC,SAAS,CACVN,OAAQA,EAAOO,U,kDAGnBC,QAAQC,IAAR,M,+IAKA,OACI,kBAACC,EAAD,KACKL,KAAKN,MAAMC,OAAOW,KAAI,SAAAvB,GAAK,OAAI,kBAAC,EAAD,CAAOwB,IAAKxB,EAAME,GAAIF,MAAOA,EAAOyB,SAAUzB,EAAMyB,mB,GAvBvEC,iBA+BnBJ,EAAYd,IAAOmB,IAAV,K,g3BC9Bf,IAuCeC,E,4MAnCXjB,MAAQ,CACJX,MAAO,I,6MAKSc,MAAM,sCAAD,OAAuCG,KAAKY,MAAMC,MAAMC,OAAO7B,GAA/D,6D,cAAjBa,E,gBACcA,EAAIC,O,OAAlBhB,E,OACNiB,KAAKC,SAAS,CACVlB,U,kDAGNoB,QAAQC,IAAR,M,+IAIO,IACCrB,EAAUiB,KAAKN,MAAfX,MACR,OACE,kBAACgC,EAAD,CAAcC,SAAQ,UAvBN,mCAuBM,OAAqBjC,EAAMkC,gBAC/C,kBAACC,EAAD,KACA,kBAAC,IAAD,CAAWjC,GAAIF,EAAME,IACnB,kBAACC,EAAD,CAAQC,IAAG,UAzBD,kCAyBC,OAAmBJ,EAAMK,aAAeC,IAAKN,EAAMO,SAE9D,6BACE,4BAAKP,EAAMO,OACX,6CAAmBP,EAAMoC,cACzB,uCAAapC,EAAMyB,iB,GA5BLY,aAsCpBL,EAAexB,IAAOmB,IAAV,KAIE,SAAAE,GAAK,OAAIA,EAAMI,YAa7BE,EAAY3B,IAAOmB,IAAV,KCvCAW,E,uKApBP,OACI,6BACI,8BACA,iDAGA,2BACIC,KAAK,OACLC,MAAOvB,KAAKY,MAAMY,aAClBC,IAAI,oBACJC,SAAU1B,KAAK2B,eAGnB,2BAAOL,KAAK,SAASC,MAAM,iB,GAfjBH,aCgCXQ,EAnBH,kBACV,kBAAC,IAAD,CAAYC,SAAS,KACnB,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,IAAD,CAAM9C,GAAG,KACP,yCAGJ,yBAAK8C,UAAU,aACb,kBAAC,IAAD,CAAOC,UAAWV,KAEpB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOW,OAAK,EAACC,KAAK,IAAIF,UAAWtC,IACjC,kBAAC,IAAD,CAAOwC,KAAK,OAAOF,UAAWpB,QChBlBuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASxB,MACvB,2DCZNyB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/C,QAAQ+C,MAAMA,EAAMC,c","file":"static/js/main.2c4a066b.chunk.js","sourcesContent":["/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport Overdrive from 'react-overdrive';\n\nconst POSTER_PATH = 'http://image.tmdb.org/t/p/w154';\n\nconst Movie = ({ movie }) => (\n  <Link to={`/${movie.id}`}>\n    <Overdrive id={movie.id}>\n      <Poster src={`${POSTER_PATH}${movie.poster_path}`} alt={movie.title} />\n    </Overdrive>\n  </Link>\n  // <h3>{movie.title}</h3>\n);\n\nexport default Movie;\n\nMovie.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    overview: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    poster_path: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport const Poster = styled.img`\n  box-shadow: 0 0 35px black;\n  max-width: 8rem;\n  margin-bottom: 2rem;\n`;\n","import React, { PureComponent } from 'react';\nimport styled from 'styled-components';\nimport Movie from './movies';\n\nclass moviesList extends PureComponent {\n    state = {\n        movies: []\n}\n  \nasync componentDidMount() {\n    try {\n    const SEARCH_QUERY = \"James Bond 007\";\n    const API_KEY = \"a62fd138fc3adf6aa51790c63f1f498e\";\n    const API_URL = `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&query=${SEARCH_QUERY}&page=1&include_adult=false`;\n    const res = await fetch(`${API_URL}`);\n    const movies = await res.json();\n    this.setState({\n        movies: movies.results\n    })\n    } catch(e){\n    console.log(e);\n    }\n}\n    \n\trender() {\n    return (\n        <MovieGrid>\n            {this.state.movies.map(movie => <Movie key={movie.id} movie={movie} overview={movie.overview}/> )}\n        </MovieGrid>\n    );\n  }\n}\n\nexport default moviesList;\n\nconst MovieGrid = styled.div `\n\tdisplay: grid;\n\tpadding: 1rem;\n\tgrid-template-columns: repeat(5, 1fr);\n    grid-row-gap: 1rem;\n    margin-top: 2rem;\n\t@media (max-width: 768px) {\n        grid-template-columns: repeat(3, 1fr);\n    }\n    @media (max-width: 430px){\n        grid-template-columns: repeat(2,1fr);\n        grid-row-gap: 0.25rem;\n        padding: 0.25rem;\n    }\n`;","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport { Poster } from './movies.js';\nimport Overdrive from 'react-overdrive';\n\nconst BACKDROP_PATH = 'http://image.tmdb.org/t/p/w1280';\nconst POSTER_PATH = 'http://image.tmdb.org/t/p/w154';\n\nclass movieDetail extends Component {\n    state = {\n        movie: {},\n}\n  \nasync componentDidMount() {\n    try {\n      const res = await fetch(`https://api.themoviedb.org/3/movie/${this.props.match.params.id}?api_key=a62fd138fc3adf6aa51790c63f1f498e&language=en-US`);\n      const movie = await res.json();\n      this.setState({\n          movie,\n      });\n    } catch(e){\n    console.log(e);\n    }\n}\n    \n\trender() {\n    const { movie } = this.state;\n    return (\n      <MovieWrapper backdrop={`${BACKDROP_PATH}${movie.backdrop_path}`}>\n        <MovieInfo>\n        <Overdrive id={movie.id}>\n          <Poster src={`${POSTER_PATH}${movie.poster_path}`} alt={movie.title} />\n        </Overdrive>\n          <div>\n            <h1>{movie.title}</h1>\n            <h3>Release Date: {movie.release_date}</h3>\n            <p>Summary: {movie.overview}</p>\n          </div>\n        </MovieInfo>\n      </MovieWrapper>\n    );\n  }\n}\n\nexport default movieDetail;\n\nconst MovieWrapper = styled.div `\n  position: relative;\n  padding-top: 30vh;\n  padding-bottom: 30vh;\n  background: url(${props => props.backdrop}) no-repeat;\n  background-size: cover;\n  @media (max-width: 768px) {\n    padding-top: 20rem;\n    padding-bottom: 20rem;\n  }\n  @media (max-width: 430px){\n    padding-top: 10rem;\n    padding-bottom: 0rem;\n    height: 0rem;\n  }\n`;\n\nconst MovieInfo = styled.div `\n  background: white;\n  text-align: left;\n  padding: 2rem;\n  display: flex;\n  > div{\n    margin-left: 20px;\n  }\n  h1{\n    margin-top: 0rem;\n  }\n  img{\n    position: relative;\n    top: -5rem;\n    max-height: 15rem;\n  }\n  @media (max-width: 768px) {\n    padding: 1rem;\n  }\n  @media (max-width: 430px){\n    display: block;\n    h1,h3,p{\n      position: relative;\n      top: -5rem;\n    }\n  }\n`;","import React, { Component } from 'react';\n\nclass movieSearch extends Component {\n    render() {\n        return (\n            <div>\n                <form>\n                <label>\n                Search Movies:\n                </label>\n                <input\n                    type=\"text\"\n                    value={this.props.searchString}\n                    ref=\"searchStringInput\"\n                    onChange={this.handleChange}\n                />\n                \n                <input type=\"submit\" value=\"Search\"  />\n            </form>\n            </div>\n        );\n    }\n}\n\nexport default movieSearch;","/* eslint-disable import/no-named-as-default */\n/* eslint-disable import/no-named-as-default-member */\nimport React from 'react';\nimport {\n  Route,\n  HashRouter,\n  Switch,\n  Link,\n} from 'react-router-dom';\nimport './App.css';\n\nimport moviesList from './moviesList';\nimport movieDetail from './movieDetail';\nimport movieSearch from './movieSearch';\n\nconst App = () => (\n  <HashRouter basename='/'>\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Link to=\"/\">\n          <h1>MOVIEDB</h1>\n        </Link>\n      </header>\n      <div className=\"searchBar\">\n        <Route component={movieSearch} />\n      </div>\n      <Switch>\n        <Route exact path=\"/\" component={moviesList} />\n        <Route path=\"/:id\" component={movieDetail} />\n      </Switch>\n    </div>\n  </HashRouter >\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}