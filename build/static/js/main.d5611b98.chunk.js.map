{"version":3,"sources":["components/movies.js","components/moviesList.js","components/formatDate.js","components/movieDetail.js","components/favoritesList.js","App.js","serviceWorker.js","index.js"],"names":["Movie","movie","onToggleFavorite","isFavorite","className","to","id","style","textDecoration","color","src","backdrop_path","alt","title","overview","length","substring","xmlns","viewBox","onClick","e","preventDefault","width","height","d","fill","stroke","strokeWidth","MoviesList","favorites","useState","movies","setMovies","query","setQuery","isLoading","setIsLoading","error","setError","page","setPage","totalResults","setTotalResults","API_URL","fetchMovies","a","newPage","isInitialSearch","fetch","encodeURIComponent","res","ok","Error","json","data","filteredMovies","results","filter","poster_path","slice","prevMovies","total_results","console","debouncedFetchMovies","useCallback","debounce","useEffect","handleSearch","totalPages","Math","ceil","shouldShowMoreButton","type","value","onChange","target","onKeyDown","key","placeholder","map","nextPage","formatDate","dateString","Date","toLocaleDateString","year","month","day","API_KEY","MovieDetail","match","setMovie","images","setImages","trailerKey","setTrailerKey","director","setDirector","cast","setCast","similarMovies","setSimilarMovies","selectedImageIndex","setSelectedImageIndex","isTrailerModalOpen","setIsTrailerModalOpen","isImageModalOpen","setIsImageModalOpen","streamingProviders","setStreamingProviders","fetchMovie","params","log","fetchImages","backdrops","fetchCredits","crew","find","person","job","name","castWithImages","member","profile_path","fetchVideos","trailerVideo","video","site","fetchSimilarMovies","fetchStreamingProviders","US","flatrate","window","scrollTo","closeImageModal","currentImage","backgroundImage","tagline","release_date","vote_average","vote_count","genres","genre","join","provider","index","href","provider_name","toLowerCase","replace","rel","logo_path","character","image","file_path","openImageModal","stopPropagation","prevIndex","frameBorder","allow","allowFullScreen","FavoritesPage","App","setFavorites","headerClass","setHeaderClass","searchResults","setSearchResults","history","useHistory","handleToggleFavorite","prevFavorites","updatedFavorites","some","fav","result","handleScroll","scrollY","addEventListener","removeEventListener","push","basename","exact","path","render","component","Boolean","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"mZA6DeA,G,oCAvDD,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,iBAAkBC,EAAiB,EAAjBA,WACxC,OACE,yBAAKC,UAAU,eACb,kBAAC,IAAD,CAAMC,GAAE,WAAMJ,EAAMK,IAAMC,MAAO,CAAEC,eAAgB,OAAQC,MAAO,YAChE,yBAAKL,UAAU,cACb,yBAAKA,UAAU,iBACb,yBACEA,UAAU,WACVM,IAAG,UAVK,kCAUL,OAAqBT,EAAMU,eAC9BC,IAAKX,EAAMY,QAEb,wBAAIT,UAAU,SAASH,EAAMY,OAC7B,uBAAGT,UAAU,eACVH,EAAMa,SAASC,OAAS,IAAMd,EAAMa,SAASE,UAAU,EAAG,KAAO,MAAQf,EAAMa,UAElF,yBAAKV,UAAU,mBACb,uBAAGA,UAAU,aAAb,aACA,yBACEa,MAAM,6BACNC,QAAQ,YACRd,UAAS,yBAAoBD,EAAa,SAAW,IACrDgB,QAAS,SAACC,GACRA,EAAEC,iBACFnB,EAAiBD,IAEnBqB,MAAM,OACNC,OAAO,QAEP,0BACEC,EAAE,iLACFC,KAAMtB,EAAa,MAAQ,OAC3BuB,OAAQvB,EAAa,MAAQ,QAC7BwB,YAAY,cCqGfC,EAtII,SAAC,GAAgD,EAA9CC,UAA+C,IAApC3B,EAAmC,EAAnCA,iBAAkBC,EAAiB,EAAjBA,WAAiB,EACtC2B,mBAAS,IAD6B,mBAC3DC,EAD2D,KACnDC,EADmD,OAExCF,mBAAS,IAF+B,mBAE3DG,EAF2D,KAEpDC,EAFoD,OAGhCJ,oBAAS,GAHuB,mBAG3DK,EAH2D,KAGhDC,EAHgD,OAIxCN,mBAAS,IAJ+B,mBAI3DO,EAJ2D,KAIpDC,EAJoD,OAK1CR,mBAAS,GALiC,mBAK3DS,EAL2D,KAKrDC,EALqD,OAM1BV,mBAAS,GANiB,mBAM3DW,EAN2D,KAM7CC,EAN6C,KAS5DC,EAAO,4DADG,mCACH,0BAEPC,EAAW,uCAAG,gDAAAC,EAAA,yDAAOC,EAAP,+BAAiB,EAAGC,EAApB,gCACbd,EADa,wDAGlBG,GAAa,GACbE,EAAS,IAJS,kBAMEU,MAAM,GAAD,OAAIL,GAAJ,OAAcM,mBAAmBhB,GAAjC,iBAAgDa,IANvD,WAMVI,EANU,QAOPC,GAPO,uBAOG,IAAIC,MAAM,+BAPb,yBAQGF,EAAIG,OARP,QAQVC,EARU,OAUZC,EAAiBD,EAAKE,QAAQC,QAAO,SAAAxD,GAAK,OAAIA,EAAMU,eAAiBV,EAAMyD,eAE3EX,GACFQ,EAAiBA,EAAeI,MAAM,EAAG,GACzC3B,EAAUuB,IAEVvB,GAAU,SAAA4B,GAAU,4BAAQA,GAAR,YAAuBL,OAG7Cb,EAAgBY,EAAKO,eAnBL,kDAqBhBvB,EAAS,4CACTwB,QAAQzB,MAAM,yBAAd,MAtBgB,yBAwBhBD,GAAa,GAxBG,6EAAH,qDA6BX2B,EAAuBC,sBAC3BC,KAAS,SAAChC,EAAOc,GAAR,OAA4BH,EAAY,EAAGG,KAAkB,KACtE,IAGFmB,qBAAU,WACJjC,EACF8B,EAAqB9B,GAAO,GAE5BD,EAAU,MAEX,CAACC,EAAO8B,IAEX,IAAMI,EAAe,WACnB3B,EAAQ,GACRI,EAAY,GAAG,IAgBXwB,EAAaC,KAAKC,KAAK7B,EAAe,IACtC8B,EAAuBxC,EAAOhB,OAAS,GAAKwB,EAAO6B,EAEzD,OACE,oCACE,yBAAKhE,UAAU,kBACb,2BACEA,UAAU,aACVoE,KAAK,OACLC,MAAOxC,EACPyC,SAAU,SAACtD,GAAD,OAAOc,EAASd,EAAEuD,OAAOF,QACnCG,UAlBc,SAACxD,GACP,UAAVA,EAAEyD,KACJV,KAiBIW,YAAY,sBAEd,4BACE1E,UAAU,SACVe,QAASgD,GAFX,WAODhC,GAAa,uBAAG/B,UAAU,WAAb,cACbiC,GAAS,uBAAGjC,UAAU,WAAWiC,GAClC,yBAAKjC,UAAU,aACb,yBAAKA,UAAU,kBACZ2B,EAAOhB,OAAS,EACfgB,EAAOgD,KAAI,SAAC9E,GAAD,OACT,kBAAC,EAAD,CACE4E,IAAK5E,EAAMK,GACXL,MAAOA,EACPC,iBAAkBA,EAClBC,WAAYA,EAAWF,SAI1BkC,IAAcE,GAAS,uBAAGjC,UAAU,mBAAb,iCAG3BmE,GACC,yBAAKnE,UAAU,gDACb,4BAAQA,UAAU,0BAA0Be,QArD/B,WACrB,IAAM6D,EAAWzC,EAAO,EACxBC,EAAQwC,GACRpC,EAAYoC,KAkDJ,iB,iBC1GKC,EATI,SAACC,GAElB,OADa,IAAIC,KAAKD,GACVE,mBAAmB,QAAS,CACtCC,KAAM,UACNC,MAAO,OACPC,IAAK,aCMLC,G,MAAU,oCA0TDC,EAxTK,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAAY,EACP5D,mBAAS,IADF,mBAC1B7B,EAD0B,KACnB0F,EADmB,OAEL7D,mBAAS,IAFJ,mBAE1B8D,EAF0B,KAElBC,EAFkB,OAGG/D,mBAAS,MAHZ,mBAG1BgE,EAH0B,KAGdC,EAHc,OAIDjE,mBAAS,IAJR,mBAI1BkE,EAJ0B,KAIhBC,EAJgB,OAKTnE,mBAAS,IALA,mBAK1BoE,EAL0B,KAKpBC,EALoB,OAMSrE,mBAAS,IANlB,mBAM1BsE,EAN0B,KAMXC,EANW,OAOmBvE,mBAAS,MAP5B,mBAO1BwE,EAP0B,KAONC,EAPM,OAQmBzE,oBAAS,GAR5B,mBAQ1B0E,EAR0B,KAQNC,EARM,OASe3E,oBAAS,GATxB,mBAS1B4E,EAT0B,KASRC,EATQ,OAUmB7E,mBAAS,IAV5B,mBAU1B8E,EAV0B,KAUNC,EAVM,KAajC3C,qBAAU,WACR,IAAM4C,EAAU,uCAAG,8BAAAjE,EAAA,+EAEGG,MAAM,sCAAD,OAAuC0C,EAAMqB,OAAOzG,GAApD,oBAAkEkF,EAAlE,oBAFR,cAETtC,EAFS,gBAGKA,EAAIG,OAHT,OAGTpD,EAHS,OAIf0F,EAAS1F,GAJM,kDAMf6D,QAAQkD,IAAR,MANe,0DAAH,qDAUVC,EAAW,uCAAG,8BAAApE,EAAA,+EAEEG,MAAM,sCAAD,OAAuC0C,EAAMqB,OAAOzG,GAApD,2BAAyEkF,IAFhF,cAEVtC,EAFU,gBAGGA,EAAIG,OAHP,OAGVC,EAHU,OAIhBuC,EAAUvC,EAAK4D,UAAUvD,MAAM,EAAG,IAJlB,kDAMhBG,QAAQkD,IAAR,MANgB,0DAAH,qDAUXG,EAAY,uCAAG,kCAAAtE,EAAA,+EAECG,MAAM,sCAAD,OAAuC0C,EAAMqB,OAAOzG,GAApD,4BAA0EkF,IAFhF,cAEXtC,EAFW,gBAGEA,EAAIG,OAHN,OAGXC,EAHW,OAIX0C,EAAW1C,EAAK8D,KAAKC,MAAK,SAAAC,GAAM,MAAmB,aAAfA,EAAOC,OACjDtB,EAAYD,EAAWA,EAASwB,KAAO,OAGjCC,EAAiBnE,EAAK4C,KAAKzC,QAAO,SAAAiE,GAAM,OAAIA,EAAOC,gBACzDxB,EAAQsB,EAAe9D,MAAM,EAAG,IATf,kDAWjBG,QAAQkD,IAAR,MAXiB,0DAAH,qDAeZY,EAAW,uCAAG,gCAAA/E,EAAA,+EAEEG,MAAM,sCAAD,OAAuC0C,EAAMqB,OAAOzG,GAApD,2BAAyEkF,IAFhF,cAEVtC,EAFU,gBAGGA,EAAIG,OAHP,OAGVC,EAHU,OAIVuE,EAAevE,EAAKE,QAAQ6D,MAAK,SAAAS,GAAK,MAAmB,YAAfA,EAAMtD,MAAqC,YAAfsD,EAAMC,QAClFhC,EAAc8B,EAAeA,EAAahD,IAAM,MALhC,kDAOhBf,QAAQkD,IAAR,MAPgB,0DAAH,qDAWXgB,EAAkB,uCAAG,gCAAAnF,EAAA,+EAELG,MAAM,sCAAD,OAAuC0C,EAAMqB,OAAOzG,GAApD,4BAA0EkF,EAA1E,oBAFA,cAEjBtC,EAFiB,gBAGJA,EAAIG,OAHA,OAGjBC,EAHiB,OAIjBC,EAAiBD,EAAKE,QAAQC,QAAO,SAAAxD,GAAK,OAAIA,EAAMU,iBAC1D0F,EAAiB9C,EAAeI,MAAM,EAAG,IALlB,kDAOvBG,QAAQkD,IAAR,MAPuB,0DAAH,qDAYhBiB,EAAuB,uCAAG,8BAAApF,EAAA,+EAEVG,MAAM,sCAAD,OAAuC0C,EAAMqB,OAAOzG,GAApD,oCAAkFkF,IAF7E,cAEtBtC,EAFsB,gBAGTA,EAAIG,OAHK,QAGtBC,EAHsB,QAInBE,QAAQ0E,IAAM5E,EAAKE,QAAQ0E,GAAGC,UACrCtB,EAAsBvD,EAAKE,QAAQ0E,GAAGC,UALZ,kDAQ5BrE,QAAQkD,IAAR,MAR4B,0DAAH,qDAY/BF,IACAG,IACAE,IACAS,IACAI,IACAC,MACC,CAACvC,EAAMqB,OAAOzG,KAEjB4D,qBAAU,WACRkE,OAAOC,SAAS,EAAG,KAClB,CAACpI,EAAMK,KAER,IA0BIgI,EAAkB,WACtB3B,GAAoB,IAahB4B,EAAe3C,EAAOU,GAE5B,OACE,oCACE,yBAAKlG,UAAU,gBAAgBG,MAAO,CAAEiI,gBAAgB,OAAD,OAlJvC,mCAkJuC,OAAyBvI,EAAMU,cAA/B,QAEvD,yBAAKP,UAAU,sBACb,wBAAIA,UAAU,2BACXH,EAAMY,OAKT,wBAAIT,UAAU,qBAAqBH,EAAMwI,SACzC,yBAAKrI,UAAU,cACb,kBAAC,IAAD,CAAWE,GAAIL,EAAMK,IACnB,yBACEF,UAAU,SACVM,IAAG,UA/JG,kCA+JH,OAAmBT,EAAMyD,aAC5B9C,IAAKX,EAAMY,SAGf,yBAAKT,UAAU,kBACb,6CACA,2BAAIH,EAAMyI,aAAezD,EAAWhF,EAAMyI,cAAgB,OAC1D,yCACA,2BAAI1C,GACJ,wCACA,2BAAI/F,EAAMa,UACV,6CACA,2BAAIb,EAAM0I,aAAV,YAAiC1I,EAAM2I,WAAvC,UACA,uCACA,2BACG3I,EAAM4I,QAAU5I,EAAM4I,OAAO9H,OAAS,EACnCd,EAAM4I,OAAO9D,KAAI,SAAA+D,GAAK,OAAIA,EAAMtB,QAAMuB,KAAK,MAC3C,uBAEHnC,EAAmB7F,OAAS,EAC3B,oCACE,yCACA,yBAAKX,UAAU,2BACZwG,EAAmB7B,KAAI,SAACiE,EAAUC,GAAX,OACtB,yBAAK7I,UAAU,iBAAiByE,IAAKoE,GACnC,uBAAG7I,UAAU,yBAAyB8I,KAAI,sBAAiBF,EAASG,cAAcC,cAAcC,QAAQ,IAAK,IAAnE,QAA8E1E,OAAO,SAAS2E,IAAI,uBAC1I,yBACI5I,IAAG,6CAAwCsI,EAASO,WACpD3I,IAAKoI,EAASG,cACd/I,UAAU,kBAEb4I,EAASG,qBAYpB,oCACE,yCACA,wDAGLrD,GACC,4BAAQ3E,QAAS,kBAAMsF,GAAsB,IAAOrG,UAAU,yBAA9D,mBAKL8F,EAAKnF,OAAS,GACb,yBAAKX,UAAU,+BACb,wBAAIA,UAAU,eAAd,SACA,yBAAKA,UAAU,wDACZ8F,EAAKnB,KAAI,SAAC2C,EAAQuB,GAAT,OACR,yBAAKpE,IAAKoE,EAAO7I,UAAU,eACzB,yBAAKA,UAAU,gBACb,yBACEM,IAAG,UA3NJ,kCA2NI,OAAoBgH,EAAOC,cAC9B/G,IAAK8G,EAAOF,KACZpH,UAAU,gBAGd,uBAAGA,UAAU,aAAasH,EAAOF,MACjC,uBAAGpH,UAAU,kBAAkBsH,EAAO8B,iBAO/C5D,EAAO7E,OAAS,GACf,yBAAKX,UAAU,kBACb,wBAAIA,UAAU,eAAd,eAAyCH,EAAMY,MAA/C,KACA,yBAAKT,UAAU,wDACZwF,EAAOb,KAAI,SAAC0E,EAAOR,GAAR,OACV,yBACEpE,IAAKoE,EACLvI,IAAG,UAhPF,kCAgPE,OAAkB+I,EAAMC,WAC3B9I,IAAG,mBAAcqI,EAAQ,GACzB7I,UAAU,cACVe,QAAS,kBA1HF,SAAC8H,GACtB1C,EAAsB0C,GACtBtC,GAAoB,GAwHSgD,CAAeV,WAOvCvC,GAAoB6B,GACnB,yBAAKnI,UAAU,QAAQe,QAASmH,GAC9B,yBAAKlI,UAAU,cACb,0BAAMA,UAAU,QAAQe,QAASmH,GAAjC,QACA,4BAAQlI,UAAU,yBAAyBe,QA5H7B,SAACC,GACzBA,EAAEwI,kBACFrD,GAAsB,SAAAsD,GAAS,OAAKA,EAAY,EAAIA,EAAY,EAAIjE,EAAO7E,OAAS,OA0H1E,UACA,yBAAKX,UAAU,cAAcM,IAAG,UAjQxB,mCAiQwB,OAAqB6H,EAAamB,WAAa9I,IAAI,aACnF,4BAAQR,UAAU,0BAA0Be,QAzHlC,SAACC,GACrBA,EAAEwI,kBACFrD,GAAsB,SAAAsD,GAAS,OAAKA,EAAYjE,EAAO7E,OAAS,EAAI8I,EAAY,EAAI,OAuH1E,YAKLrD,GACC,yBAAKpG,UAAU,QAAQe,QAAS,kBAAMsF,GAAsB,KAC1D,yBAAKrG,UAAU,aAAae,QAAS,SAAAC,GAAC,OAAIA,EAAEwI,oBAC1C,0BAAMxJ,UAAU,QAAQe,QAAS,kBAAMsF,GAAsB,KAA7D,QACA,yBAAKrG,UAAU,oBACb,4BACES,MAAM,UACNS,MAAM,MACNC,OAAO,MACPb,IAAG,wCAAmCoF,GACtCgE,YAAY,IACZC,MAAM,4BACNC,iBAAe,OAOxB5D,EAAcrF,OAAS,GACtB,yBAAKX,UAAU,kBACb,wBAAIA,UAAU,eAAd,mBACA,yBAAKA,UAAU,yCACZgG,EAAcrB,KAAI,SAAA9E,GAAK,OACtB,yBAAK4E,IAAK5E,EAAMK,GAAIF,UAAU,eAC5B,kBAAC,IAAD,CAAMC,GAAE,WAAMJ,EAAMK,IAAMC,MAAO,CAAEC,eAAgB,OAAQC,MAAO,YAChE,yBAAKL,UAAU,cACb,yBAAKA,UAAU,iBACb,yBACEA,UAAU,WACVM,IAAG,UArSP,mCAqSO,OAAqBT,EAAMU,eAC9BC,IAAKX,EAAMY,QAEb,wBAAIT,UAAU,SAASH,EAAMY,OAC7B,uBAAGT,UAAU,eACVH,EAAMa,SAASC,OAAS,IAAMd,EAAMa,SAASE,UAAU,EAAG,KAAO,MAAQf,EAAMa,UAElF,uBAAGV,UAAU,aAAb,sBAUhB,yBAAKA,UAAU,2CACb,kBAAC,IAAD,CAAMC,GAAE,IAAOD,UAAU,UAAzB,oBC9QK6J,EA5CO,SAAC,GAAqC,IAAnCpI,EAAkC,EAAlCA,UAAW3B,EAAuB,EAAvBA,iBAEhC,OACI,yBAAKE,UAAU,kBACX,wBAAIA,UAAU,eAAd,gBACA,yBAAKA,UAAU,aACX,yBAAKA,UAAU,kBAENyB,EAAUd,OAAS,EAChBc,EAAUkD,KAAI,SAAA9E,GAAK,OACf,kBAAC,EAAD,CACI4E,IAAK5E,EAAMK,GACXL,MAAOA,EACPC,iBAAkBA,EAClBC,YAAY,OAIpB,yBAAKC,UAAU,cACX,uBAAGA,UAAU,eAAb,6BAKhB,yBAAKA,UAAU,2CACX,kBAAC,IAAD,CAAMC,GAAE,IAAOD,UAAU,UAAzB,oBC0JL8J,EA3KH,WAAO,IAAD,EACkBpI,mBAAS,IAD3B,mBACTD,EADS,KACEsI,EADF,OAEsBrI,mBAAS,IAF/B,mBAETsI,EAFS,KAEIC,EAFJ,OAGUvI,mBAAS,IAHnB,mBAGTG,EAHS,KAGFC,EAHE,OAI0BJ,mBAAS,IAJnC,mBAITwI,EAJS,KAIMC,EAJN,OAKkBzI,oBAAS,GAL3B,mBAKTK,EALS,KAKEC,EALF,OAMUN,mBAAS,IANnB,mBAMTO,EANS,KAMFC,EANE,KAQVkI,EAAUC,cAGV9H,EAAO,4DADG,mCACH,0BAEP+H,EAAuB,SAACzK,GAC5BkK,GAAa,SAAAQ,GACX,IACMC,EADaD,EAAcE,MAAK,SAAAC,GAAG,OAAIA,EAAIxK,KAAOL,EAAMK,MAE1DqK,EAAclH,QAAO,SAAAqH,GAAG,OAAIA,EAAIxK,KAAOL,EAAMK,MADd,sBAE3BqK,GAF2B,CAEZ1K,IAEvB,OADA6D,QAAQkD,IAAI,4BAA6B4D,GAClCA,MAILzK,EAAa,SAACF,GAClB,IAAM8K,EAASlJ,EAAUgJ,MAAK,SAAAC,GAAG,OAAIA,EAAIxK,KAAOL,EAAMK,MAEtD,OADAwD,QAAQkD,IAAI,4BAA6B+D,GAClCA,GAGHnI,EAAW,uCAAG,WAAOX,GAAP,mBAAAY,EAAA,yDACbZ,EADa,wDAGlBG,GAAa,GACbE,EAAS,IAJS,kBAMEU,MAAM,GAAD,OAAIL,GAAJ,OAAcM,mBAAmBhB,GAAjC,YANP,WAMViB,EANU,QAOPC,GAPO,uBAOG,IAAIC,MAAM,+BAPb,yBAQGF,EAAIG,OARP,QAQVC,EARU,OAUVC,EAAiBD,EAAKE,QAAQC,QAAO,SAAAxD,GAAK,OAAIA,EAAMU,eAAiBV,EAAMyD,eACjF6G,EAAiBhH,GAXD,kDAahBjB,EAAS,4CACTwB,QAAQzB,MAAM,yBAAd,MAdgB,yBAgBhBD,GAAa,GAhBG,6EAAH,sDAoBX2B,EAAuBC,sBAC3BC,KAAS,SAAChC,GAAD,OAAWW,EAAYX,KAAQ,KACxC,IAGFiC,qBAAU,WACR,IAAM8G,EAAe,WACf5C,OAAO6C,QAAU,GACnBZ,EAAe,UAEfA,EAAe,KAKnB,OADAjC,OAAO8C,iBAAiB,SAAUF,GAC3B,kBAAM5C,OAAO+C,oBAAoB,SAAUH,MACjD,IAEH9G,qBAAU,WACJjC,EACF8B,EAAqB9B,GAErBsI,EAAiB,MAElB,CAACtI,EAAO8B,IAEX,IAAMI,EAAe,WACnBvB,EAAYX,GACZuI,EAAQY,KAAK,MASf,OACE,kBAAC,IAAD,CAAYC,SAAS,KACnB,yBAAKjL,UAAU,OACb,4BAAQA,UAAS,yBAAoBgK,IACnC,kBAAC,IAAD,CAAM/J,GAAG,KACP,yBAAKD,UAAU,QACb,6BACE,0CACA,gFAILgK,GACC,yBAAKhK,UAAU,iBACb,2BACEA,UAAU,aACVoE,KAAK,OACLC,MAAOxC,EACPyC,SAAU,SAACtD,GAAD,OAAOc,EAASd,EAAEuD,OAAOF,QACnCG,UAzBQ,SAACxD,GACP,UAAVA,EAAEyD,KACJV,KAwBUW,YAAY,sBAEd,4BACE1E,UAAU,SACVe,QAASgD,GAFX,WAQJ,kBAAC,IAAD,CAAM9D,GAAG,cACP,yBAAKD,UAAU,uBACb,yBACIa,MAAM,6BACNC,QAAQ,YACRd,UAAS,yBAAoByB,EAAUd,OAAS,EAAI,SAAW,IAC/DO,MAAM,OACNC,OAAO,QAEP,0BACEC,EAAE,iLACFC,KAAMI,EAAUd,OAAS,EAAI,MAAQ,cACrCW,OAAQG,EAAUd,OAAS,EAAI,MAAQ,QACvCY,YAAY,UAMxB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO2J,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAC5B,kBAAC,EAAD,CACE3J,UAAWA,EACX3B,iBAAkBwK,EAClBvK,WAAYA,OAGhB,kBAAC,IAAD,CAAOoL,KAAK,aAAaC,OAAQ,kBAC/B,kBAAC,EAAD,CACE3J,UAAWA,EACX3B,iBAAkBwK,OAGtB,kBAAC,IAAD,CAAOa,KAAK,OAAOE,UAAWhG,KAE/B6E,EAAcvJ,OAAS,GACtB,yBAAKX,UAAU,kBACZkK,EAAcvF,KAAI,SAAC9E,GAAD,OACjB,yBAAK4E,IAAK5E,EAAMK,GAAIF,UAAU,sBAC5B,kBAAC,IAAD,CAAMC,GAAE,WAAMJ,EAAMK,KAClB,yBAAKI,IAAG,yCAAoCT,EAAMyD,aAAe9C,IAAKX,EAAMY,QAC5E,2BAAIZ,EAAMY,aAMnBsB,GAAa,uBAAG/B,UAAU,WAAb,cACbiC,GAAS,uBAAGjC,UAAU,WAAWiC,MCtKtBqJ,QACW,cAA7BtD,OAAOuD,SAASC,UAEe,UAA7BxD,OAAOuD,SAASC,UAEhBxD,OAAOuD,SAASC,SAASlG,MACvB,2DCZNmG,IAASL,OACP,kBAAC,IAAMM,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAlK,GACLyB,QAAQzB,MAAMA,EAAMmK,c","file":"static/js/main.d5611b98.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nconst BACKDROP_PATH = 'http://image.tmdb.org/t/p/w780';\n\nconst Movie = ({ movie, onToggleFavorite, isFavorite }) => {\n  return (\n    <div className='single-card'>\n      <Link to={`/${movie.id}`} style={{ textDecoration: 'none', color: 'inherit' }}>\n        <div className=\"movie-card\">\n          <div className=\"movie-details\">\n            <img\n              className=\"card-img\"\n              src={`${BACKDROP_PATH}${movie.backdrop_path}`}\n              alt={movie.title}\n            />\n            <h2 className=\"title\">{movie.title}</h2>\n            <p className=\"description\">\n              {movie.overview.length > 100 ? movie.overview.substring(0, 100) + '...' : movie.overview}\n            </p>\n            <div className='flex card-icons'>\n              <p className='read-more'>Read More</p>\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                viewBox=\"0 0 24 24\"\n                className={`favorite-heart ${isFavorite ? 'active' : ''}`}\n                onClick={(e) => {\n                  e.preventDefault(); // Prevent navigation to movie detail\n                  onToggleFavorite(movie); // Correctly toggle favorite\n                }}\n                width=\"30px\"\n                height=\"30px\"\n              >\n                <path\n                  d=\"M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z\"\n                  fill={isFavorite ? \"red\" : \"none\"}\n                  stroke={isFavorite ? \"red\" : \"black\"}\n                  strokeWidth=\"1\"\n                />\n              </svg>\n\n            </div>\n          </div>\n        </div>\n      </Link>\n    </div>\n  );\n};\n\nMovie.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    overview: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n    backdrop_path: PropTypes.string.isRequired,\n  }).isRequired,\n  onToggleFavorite: PropTypes.func.isRequired,\n  isFavorite: PropTypes.bool.isRequired,\n};\n\nexport default Movie;\n","import React, { useState, useCallback, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Movie from './movies';\nimport debounce from 'lodash.debounce';\n\nconst MoviesList = ({ favorites, onToggleFavorite, isFavorite }) => {\n  const [movies, setMovies] = useState([]);\n  const [query, setQuery] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [page, setPage] = useState(1);\n  const [totalResults, setTotalResults] = useState(0);\n\n  const API_KEY = 'a62fd138fc3adf6aa51790c63f1f498e';\n  const API_URL = `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&query=`;\n\n  const fetchMovies = async (newPage = 1, isInitialSearch = false) => {\n    if (!query) return; // Avoid fetching if there's no query\n\n    setIsLoading(true);\n    setError('');\n    try {\n      const res = await fetch(`${API_URL}${encodeURIComponent(query)}&page=${newPage}`);\n      if (!res.ok) throw new Error('Network response was not ok');\n      const data = await res.json();\n\n      let filteredMovies = data.results.filter(movie => movie.backdrop_path && movie.poster_path);\n\n      if (isInitialSearch) {\n        filteredMovies = filteredMovies.slice(0, 6); // Initial search limit\n        setMovies(filteredMovies); // Set movies for the first search\n      } else {\n        setMovies(prevMovies => [...prevMovies, ...filteredMovies]); // Append movies for subsequent pages\n      }\n\n      setTotalResults(data.total_results);\n    } catch (error) {\n      setError('Error fetching movies. Please try again.');\n      console.error('Error fetching movies:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Create a debounced version of the fetchMovies function\n  const debouncedFetchMovies = useCallback(\n    debounce((query, isInitialSearch) => fetchMovies(1, isInitialSearch), 500),\n    []\n  );\n\n  useEffect(() => {\n    if (query) {\n      debouncedFetchMovies(query, true);\n    } else {\n      setMovies([]); // Clear movies if the query is empty\n    }\n  }, [query, debouncedFetchMovies]);\n\n  const handleSearch = () => {\n    setPage(1); // Reset page to 1 for new search\n    fetchMovies(1, true); // Perform initial search\n  };\n\n  const handleShowMore = () => {\n    const nextPage = page + 1;\n    setPage(nextPage); // Increment page number\n    fetchMovies(nextPage); // Fetch movies for the next page\n  };\n\n  const handleKeyDown = (e) => {\n    if (e.key === 'Enter') {\n      handleSearch();\n    }\n  };\n\n\n  const totalPages = Math.ceil(totalResults / 20);\n  const shouldShowMoreButton = movies.length > 0 && page < totalPages;\n\n  return (\n    <>\n      <div className='search-contain'>\n        <input\n          className='search-bar'\n          type=\"text\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n          onKeyDown={handleKeyDown}\n          placeholder=\"Search for movies\"\n        />\n        <button \n          className='button'\n          onClick={handleSearch} \n        >\n          Search\n        </button>\n      </div>\n      {isLoading && <p className='loading'>Loading...</p>}\n      {error && <p className='loading'>{error}</p>}\n      <div className='container'>\n        <div className='flex flex-wrap'>\n          {movies.length > 0 ? (\n            movies.map((movie) => (\n              <Movie \n                key={movie.id} \n                movie={movie}\n                onToggleFavorite={onToggleFavorite} // Pass the function as a prop\n                isFavorite={isFavorite(movie)} // Pass the result of the function as a prop\n              />\n            ))\n          ) : (\n            !isLoading && !error && <p className='no-movies-found'>Try searching a movie title.</p>\n          )}\n        </div>\n        {shouldShowMoreButton && (\n          <div className=\"show-more-parent flex justify-content-center\">\n            <button className='show-more-button button' onClick={handleShowMore}>\n              Show More\n            </button>\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nMoviesList.propTypes = {\n  favorites: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      overview: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n      backdrop_path: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  onToggleFavorite: PropTypes.func.isRequired,\n  isFavorite: PropTypes.func.isRequired,\n};\n\nexport default MoviesList;\n","  // Function to format the release date\n  const formatDate = (dateString) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n    });\n  };\n\n  export default formatDate;","import React, { useState, useEffect } from 'react';\nimport Overdrive from 'react-overdrive';\nimport { Link } from 'react-router-dom';\nimport formatDate from './formatDate';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faShareAlt } from '@fortawesome/free-solid-svg-icons';\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons';\n\nconst BACKDROP_PATH = 'http://image.tmdb.org/t/p/w1280';\nconst POSTER_PATH = 'http://image.tmdb.org/t/p/w342';\nconst IMAGE_PATH = 'http://image.tmdb.org/t/p/w200';\nconst PROFILE_PATH = 'http://image.tmdb.org/t/p/w185';\nconst API_KEY = 'a62fd138fc3adf6aa51790c63f1f498e';\n\nconst MovieDetail = ({ match }) => {\n  const [movie, setMovie] = useState({});\n  const [images, setImages] = useState([]);\n  const [trailerKey, setTrailerKey] = useState(null);\n  const [director, setDirector] = useState('');\n  const [cast, setCast] = useState([]); \n  const [similarMovies, setSimilarMovies] = useState([]);\n  const [selectedImageIndex, setSelectedImageIndex] = useState(null);\n  const [isTrailerModalOpen, setIsTrailerModalOpen] = useState(false);\n  const [isImageModalOpen, setIsImageModalOpen] = useState(false);\n  const [streamingProviders, setStreamingProviders] = useState([]);\n\n\n  useEffect(() => {\n    const fetchMovie = async () => {\n      try {\n        const res = await fetch(`https://api.themoviedb.org/3/movie/${match.params.id}?api_key=${API_KEY}&language=en-US`);\n        const movie = await res.json();\n        setMovie(movie);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    const fetchImages = async () => {\n      try {\n        const res = await fetch(`https://api.themoviedb.org/3/movie/${match.params.id}/images?api_key=${API_KEY}`);\n        const data = await res.json();\n        setImages(data.backdrops.slice(0, 8));\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    const fetchCredits = async () => {\n      try {\n        const res = await fetch(`https://api.themoviedb.org/3/movie/${match.params.id}/credits?api_key=${API_KEY}`);\n        const data = await res.json();\n        const director = data.crew.find(person => person.job === 'Director');\n        setDirector(director ? director.name : 'N/A');\n\n        // Filter and set cast members with profile images\n        const castWithImages = data.cast.filter(member => member.profile_path);\n        setCast(castWithImages.slice(0, 5));\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    const fetchVideos = async () => {\n      try {\n        const res = await fetch(`https://api.themoviedb.org/3/movie/${match.params.id}/videos?api_key=${API_KEY}`);\n        const data = await res.json();\n        const trailerVideo = data.results.find(video => video.type === 'Trailer' && video.site === 'YouTube');\n        setTrailerKey(trailerVideo ? trailerVideo.key : null);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    const fetchSimilarMovies = async () => {\n      try {\n        const res = await fetch(`https://api.themoviedb.org/3/movie/${match.params.id}/similar?api_key=${API_KEY}&language=en-US`);\n        const data = await res.json();\n        const filteredMovies = data.results.filter(movie => movie.backdrop_path);\n        setSimilarMovies(filteredMovies.slice(0, 3));\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n\n      const fetchStreamingProviders = async () => {\n        try {\n          const res = await fetch(`https://api.themoviedb.org/3/movie/${match.params.id}/watch/providers?api_key=${API_KEY}`);\n          const data = await res.json();\n          if (data.results.US && data.results.US.flatrate) {\n            setStreamingProviders(data.results.US.flatrate); // assuming you're interested in US providers\n          }\n        } catch (e) {\n          console.log(e);\n        }\n      };\n\n    fetchMovie();\n    fetchImages();\n    fetchCredits();\n    fetchVideos();\n    fetchSimilarMovies();\n    fetchStreamingProviders();\n  }, [match.params.id]);\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [movie.id]);\n\n    const handleShare = () => {\n    const url = window.location.href;\n    const text = `Check out this movie: ${movie.title}`;\n    if (navigator.share) {\n      navigator.share({\n        title: movie.title,\n        text,\n        url,\n      }).catch(console.error);\n    } else {\n      // Fallback for unsupported browsers\n      alert(\"Your browser doesn't support the Web Share API.\");\n    }\n  };\n\n  const shareOnTwitter = () => {\n    const url = `https://twitter.com/intent/tweet?url=${encodeURIComponent(window.location.href)}&text=${encodeURIComponent(`Check out this movie: ${movie.title}`)}`;\n    window.open(url, '_blank');\n  };\n\n\n  const openImageModal = (index) => {\n    setSelectedImageIndex(index);\n    setIsImageModalOpen(true);\n  };\n\n  const closeImageModal = () => {\n    setIsImageModalOpen(false);\n  };\n\n  const showPreviousImage = (e) => {\n    e.stopPropagation();\n    setSelectedImageIndex(prevIndex => (prevIndex > 0 ? prevIndex - 1 : images.length - 1));\n  };\n\n  const showNextImage = (e) => {\n    e.stopPropagation();\n    setSelectedImageIndex(prevIndex => (prevIndex < images.length - 1 ? prevIndex + 1 : 0));\n  };\n\n  const currentImage = images[selectedImageIndex];\n\n  return (\n    <>\n      <div className=\"movie-wrapper\" style={{ backgroundImage: `url(${BACKDROP_PATH}${movie.backdrop_path})` }}>\n      </div>\n      <div className='container relative'>\n        <h1 className='movie-title text-center'>\n          {movie.title}\n           {/* <button onClick={handleShare} className=\"share-button\">\n            <FontAwesomeIcon icon={faShareAlt} />\n          </button> */}\n        </h1>\n        <em className='block text-center'>{movie.tagline}</em>\n        <div className=\"movie-info\">\n          <Overdrive id={movie.id}>\n            <img\n              className=\"poster\"\n              src={`${POSTER_PATH}${movie.poster_path}`}\n              alt={movie.title}\n            />\n          </Overdrive>\n          <div className='detailed-movie'>\n            <h3>Release Date:</h3>\n            <p>{movie.release_date ? formatDate(movie.release_date) : 'N/A'}</p>\n            <h3>Director:</h3>\n            <p>{director}</p>\n            <h3>Summary:</h3>\n            <p>{movie.overview}</p>\n            <h3>Vote Average:</h3>\n            <p>{movie.vote_average}/10 with {movie.vote_count} votes</p>\n            <h3>Genres:</h3>\n            <p>\n              {movie.genres && movie.genres.length > 0\n                ? movie.genres.map(genre => genre.name).join(', ')\n                : 'No genres available'}\n            </p>\n              {streamingProviders.length > 0 ? (\n                <>\n                  <h3>Watch on:</h3>\n                  <div className=\"gap streaming-providers\">\n                    {streamingProviders.map((provider, index) => (\n                      <div className=\"stream-contain\" key={index}>\n                        <a className=\"movie-card stream-card\" href={`https://www.${provider.provider_name.toLowerCase().replace(' ', '')}.com`} target=\"_blank\" rel=\"noopener noreferrer\">\n                          <img\n                              src={`https://image.tmdb.org/t/p/original${provider.logo_path}`}\n                              alt={provider.provider_name}\n                              className=\"provider-logo\"\n                            />\n                          {provider.provider_name}\n                        </a>\n                      </div>\n                    ))}\n                  </div>\n                  {/* <div className=\"share-options\">\n                    <button onClick={shareOnTwitter} className=\"share-option\">\n                      <FontAwesomeIcon icon={faTwitter} /> Twitter\n                    </button>\n                  </div> */}\n                </>\n              ) : (\n                <>\n                  <h3>Watch on:</h3>\n                  <p>Not currently streaming.</p>\n                </>\n              )}\n            {trailerKey && (\n              <button onClick={() => setIsTrailerModalOpen(true)} className=\"button trailer-button\">Watch Trailer</button>\n            )}\n          </div>\n        </div>\n\n        {cast.length > 0 && (\n          <div className=\"cast-section similar-movies\">\n            <h2 className='text-center'>Cast:</h2>\n            <div className=\"image-grid gap flex flex-wrap justify-content-center\">\n              {cast.map((member, index) => (\n                <div key={index} className=\"cast-member\">\n                  <div className='cast-contain'>\n                    <img\n                      src={`${PROFILE_PATH}${member.profile_path}`}\n                      alt={member.name}\n                      className=\"cast-image\"\n                    />\n                  </div>\n                  <p className=\"cast-name\">{member.name}</p>\n                  <p className=\"cast-character\">{member.character}</p>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {images.length > 0 && (\n          <div className='similar-movies'>\n            <h2 className='text-center'>Images from {movie.title}:</h2>\n            <div className=\"image-grid gap flex flex-wrap justify-content-center\">\n              {images.map((image, index) => (\n                <img\n                  key={index}\n                  src={`${IMAGE_PATH}${image.file_path}`}\n                  alt={`Backdrop ${index + 1}`}\n                  className=\"movie-image\"\n                  onClick={() => openImageModal(index)}\n                />\n              ))}\n            </div>\n          </div>\n        )}\n\n        {isImageModalOpen && currentImage && (\n          <div className=\"modal\" onClick={closeImageModal}>\n            <div className='modal-body'>\n              <span className=\"close\" onClick={closeImageModal}>&times;</span>\n              <button className=\"button nav-button left\" onClick={showPreviousImage}>❮</button>\n              <img className=\"modal-image\" src={`${BACKDROP_PATH}${currentImage.file_path}`} alt=\"Selected\" />\n              <button className=\"button nav-button right\" onClick={showNextImage}>❯</button>\n            </div>\n          </div>\n        )}\n\n        {isTrailerModalOpen && (\n          <div className=\"modal\" onClick={() => setIsTrailerModalOpen(false)}>\n            <div className='modal-body' onClick={e => e.stopPropagation()}>\n              <span className=\"close\" onClick={() => setIsTrailerModalOpen(false)}>&times;</span>\n              <div className=\"video-responsive\">\n                <iframe\n                  title=\"Trailer\"\n                  width=\"560\"\n                  height=\"315\"\n                  src={`https://www.youtube.com/embed/${trailerKey}`}\n                  frameBorder=\"0\"\n                  allow=\"autoplay; encrypted-media\"\n                  allowFullScreen\n                ></iframe>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {similarMovies.length > 0 && (\n          <div className=\"similar-movies\">\n            <h2 className='text-center'>Similar Movies:</h2>\n            <div className=\"justify-content-center flex flex-wrap\">\n              {similarMovies.map(movie => (\n                <div key={movie.id} className=\"single-card\">\n                  <Link to={`/${movie.id}`} style={{ textDecoration: 'none', color: 'inherit' }}>\n                    <div className=\"movie-card\">\n                      <div className=\"movie-details\">\n                        <img\n                          className=\"card-img\"\n                          src={`${BACKDROP_PATH}${movie.backdrop_path}`}\n                          alt={movie.title}\n                        />\n                        <h2 className=\"title\">{movie.title}</h2>\n                        <p className=\"description\">\n                          {movie.overview.length > 100 ? movie.overview.substring(0, 100) + '...' : movie.overview}\n                        </p>\n                        <p className='read-more'>Read More</p>\n                      </div>\n                    </div>\n                  </Link>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        <div className='back-parent flex justify-content-center'>\n          <Link to={`/`} className=\"button\">Back to Home</Link>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default MovieDetail;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Movie from './movies'; \nimport { Link } from 'react-router-dom';\n\nconst FavoritesPage = ({ favorites, onToggleFavorite }) => {\n\n    return (\n        <div className=\"favorites-page\">\n            <h1 className='text-center'>Your Fave(s)</h1>\n            <div className='container'>\n                <div className='flex flex-wrap'>\n\n                        {favorites.length > 0 ? (\n                            favorites.map(movie => (\n                                <Movie\n                                    key={movie.id}\n                                    movie={movie}\n                                    onToggleFavorite={onToggleFavorite}\n                                    isFavorite={true} // Always true in the favorites page\n                                />\n                            ))\n                        ) : (\n                            <div className='full-width'>\n                                <p className='text-center'>No favorites added yet.</p>\n                            </div>\n                        )}\n\n                </div>\n                <div className='back-parent flex justify-content-center'>\n                    <Link to={`/`} className=\"button\">Back to Home</Link>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nFavoritesPage.propTypes = {\n    favorites: PropTypes.arrayOf(\n        PropTypes.shape({\n            title: PropTypes.string.isRequired,\n            overview: PropTypes.string.isRequired,\n            id: PropTypes.number.isRequired,\n            backdrop_path: PropTypes.string.isRequired,\n        })\n    ).isRequired,\n    onToggleFavorite: PropTypes.func.isRequired,\n};\n\nexport default FavoritesPage;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { Route, HashRouter, Switch, Link, useHistory } from 'react-router-dom';\nimport debounce from 'lodash.debounce';\nimport './App.css';\nimport './styles/styles-details-2.css';\nimport './styles/styles.css';\nimport './styles/search.css';\nimport './styles/movie-card.css';\nimport './styles/modal.css';\nimport MoviesList from './components/moviesList';\nimport MovieDetail from './components/movieDetail';\nimport FavoritesPage from './components/favoritesList';\n\nconst App = () => {\n  const [favorites, setFavorites] = useState([]);\n  const [headerClass, setHeaderClass] = useState('');\n  const [query, setQuery] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  \n  const history = useHistory();  // Get the history object from React Router\n\n  const API_KEY = 'a62fd138fc3adf6aa51790c63f1f498e';\n  const API_URL = `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&query=`;\n\n  const handleToggleFavorite = (movie) => {\n    setFavorites(prevFavorites => {\n      const isFavorite = prevFavorites.some(fav => fav.id === movie.id);\n      const updatedFavorites = isFavorite\n        ? prevFavorites.filter(fav => fav.id !== movie.id)\n        : [...prevFavorites, movie];\n      console.log(\"Updated favorites in App:\", updatedFavorites); // Debugging\n      return updatedFavorites;\n    });\n  };\n\n  const isFavorite = (movie) => {\n    const result = favorites.some(fav => fav.id === movie.id);\n    console.log(\"Is movie favorite in App:\", result); // Debugging\n    return result;\n  };\n\n  const fetchMovies = async (query) => {\n    if (!query) return;\n\n    setIsLoading(true);\n    setError('');\n    try {\n      const res = await fetch(`${API_URL}${encodeURIComponent(query)}&page=1`);\n      if (!res.ok) throw new Error('Network response was not ok');\n      const data = await res.json();\n\n      const filteredMovies = data.results.filter(movie => movie.backdrop_path && movie.poster_path);\n      setSearchResults(filteredMovies);\n    } catch (error) {\n      setError('Error fetching movies. Please try again.');\n      console.error('Error fetching movies:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const debouncedFetchMovies = useCallback(\n    debounce((query) => fetchMovies(query), 500),\n    []\n  );\n\n  useEffect(() => {\n    const handleScroll = () => {\n      if (window.scrollY > 36) {\n        setHeaderClass('scroll');\n      } else {\n        setHeaderClass('');\n      }\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  useEffect(() => {\n    if (query) {\n      debouncedFetchMovies(query);\n    } else {\n      setSearchResults([]);\n    }\n  }, [query, debouncedFetchMovies]);\n\n  const handleSearch = () => {\n    fetchMovies(query);\n    history.push('/');  // Navigate back to the root page after a search\n  };\n\n  const handleKeyDown = (e) => {\n    if (e.key === 'Enter') {\n      handleSearch();\n    }\n  };\n\n  return (\n    <HashRouter basename='/'>\n      <div className=\"App\">\n        <header className={`search-header  ${headerClass}`}>\n          <Link to=\"/\">\n            <div className='logo'>\n              <div>\n                <h1>Searchflix</h1>\n                <p>A Movie search engine created by @FrontEndMike</p>\n              </div>\n            </div>\n          </Link>\n          {headerClass && (\n            <div className='header-search'>\n              <input\n                className='search-bar'\n                type=\"text\"\n                value={query}\n                onChange={(e) => setQuery(e.target.value)}\n                onKeyDown={handleKeyDown}\n                placeholder=\"Search for movies\"\n              />\n              <button \n                className='button'\n                onClick={handleSearch} \n              >\n                Search\n              </button>\n            </div>\n          )}\n          <Link to=\"/favorites\">\n            <div className='flex favorites-icon'>\n              <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 24 24\"\n                  className={`favorite-heart ${favorites.length > 0 ? 'active' : ''}`}\n                  width=\"30px\"\n                  height=\"30px\"\n                >\n                  <path\n                    d=\"M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z\"\n                    fill={favorites.length > 0 ? \"red\" : \"transparent\"}\n                    stroke={favorites.length > 0 ? \"red\" : \"white\"}\n                    strokeWidth=\"1\"\n                  />\n                </svg>\n            </div>\n          </Link>\n        </header>\n        <Switch>\n          <Route exact path=\"/\" render={() => (\n            <MoviesList\n              favorites={favorites}\n              onToggleFavorite={handleToggleFavorite}\n              isFavorite={isFavorite}\n            />\n          )} />\n          <Route path=\"/favorites\" render={() => (\n            <FavoritesPage\n              favorites={favorites}\n              onToggleFavorite={handleToggleFavorite}\n            />\n          )} />\n          <Route path=\"/:id\" component={MovieDetail} />\n        </Switch>\n        {searchResults.length > 0 && (\n          <div className='search-results'>\n            {searchResults.map((movie) => (\n              <div key={movie.id} className='search-result-item'>\n                <Link to={`/${movie.id}`}>\n                  <img src={`https://image.tmdb.org/t/p/w200${movie.poster_path}`} alt={movie.title} />\n                  <p>{movie.title}</p>\n                </Link>\n              </div>\n            ))}\n          </div>\n        )}\n        {isLoading && <p className='loading'>Loading...</p>}\n        {error && <p className='loading'>{error}</p>}\n      </div>\n    </HashRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}